package nikev.group.project.chargingplatform.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import nikev.group.project.chargingplatform.model.Station;
import nikev.group.project.chargingplatform.service.StationService;
import nikev.group.project.chargingplatform.DTOs.SearchStationDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

import java.util.Arrays;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(StationController.class)
@AutoConfigureMockMvc(addFilters = false)
class StationControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockitoBean
    private StationService stationService;

    private Station station;

    @BeforeEach
    void setUp() {
        station = new Station();
        station.setId(1L);
        station.setName("Test Station");
        station.setLocation("Test Location");
        station.setLatitude(40.7128);
        station.setLongitude(-74.0060);
        station.setPricePerKwh(0.5);
        station.setSupportedConnectors(Arrays.asList("CCS", "Type 2"));
        station.setTimetable("24/7");
    }

    @Test
    void getAllStations_ShouldReturnAllStations() throws Exception {
        when(stationService.getAllStations()).thenReturn(Arrays.asList(station));

        mockMvc.perform(get("/api/charging-stations"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Test Station"))
                .andExpect(jsonPath("$[0].location").value("Test Location"));
    }

    @Test
    void getStationById_WhenExists_ShouldReturnStation() throws Exception {
        when(stationService.getStationById(1L)).thenReturn(station);

        mockMvc.perform(get("/api/charging-stations/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Test Station"))
                .andExpect(jsonPath("$.location").value("Test Location"));
    }

    @Test
    void getNearbyStations_ShouldReturnStationsInRadius() throws Exception {
        when(stationService.findNearbyStations(40.7128, -74.0060, 10.0))
                .thenReturn(Arrays.asList(station));

        mockMvc.perform(get("/api/charging-stations/nearby")
                .param("latitude", "40.7128")
                .param("longitude", "-74.0060")
                .param("radiusKm", "10.0"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Test Station"))
                .andExpect(jsonPath("$[0].location").value("Test Location"));
    }

    @Test
    void searchStations_WithFilters_ShouldReturnFilteredStations() throws Exception {
        SearchStationDTO searchStationDTO = new SearchStationDTO();
        searchStationDTO.setSupportedConnectors(Arrays.asList("CCS", "Type 2"));
        searchStationDTO.setMinPricePerKwh(0.4);
        searchStationDTO.setMaxPricePerKwh(0.6);
        searchStationDTO.setName("Test Station");
        searchStationDTO.setLocation("Test Location");
        searchStationDTO.setLatitude(40.7128);
        searchStationDTO.setLongitude(-74.0060);
        searchStationDTO.setRadiusKm(10.0);

        when(stationService.searchStations(any(SearchStationDTO.class)))
                .thenReturn(Arrays.asList(station));

        mockMvc.perform(post("/api/charging-stations/search")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(searchStationDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Test Station"))
                .andExpect(jsonPath("$[0].location").value("Test Location"));
    }

    @Test
    void createStation_ShouldReturnCreatedStation() throws Exception {
        when(stationService.createStation(any(Station.class))).thenReturn(station);

        mockMvc.perform(post("/api/charging-stations")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(station)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Test Station"))
                .andExpect(jsonPath("$.location").value("Test Location"));
    }

    @Test
    void updateStation_ShouldReturnUpdatedStation() throws Exception {
        when(stationService.updateStation(any(Long.class), any(Station.class))).thenReturn(station);

        mockMvc.perform(put("/api/charging-stations/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(station)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Test Station"))
                .andExpect(jsonPath("$.location").value("Test Location"));
    }

    @Test
    void deleteStation_ShouldReturnNoContent() throws Exception {
        mockMvc.perform(delete("/api/charging-stations/1"))
                .andExpect(status().isNoContent());

        verify(stationService).deleteStation(1L);
    }
}