version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: chargingplatform-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - $POSTGRES_LOCAL_PORT:$POSTGRES_DOCKER_PORT
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./chargingplatform
      dockerfile: Dockerfile
    container_name: chargingplatform-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      HOSTNAME: ${HOSTNAME}
      FRONTEND_DOCKER_PORT: ${FRONTEND_DOCKER_PORT}
      SPRING_APPLICATION_JSON: '{
          "spring.datasource.url" : "jdbc:postgresql://postgres:$POSTGRES_DOCKER_PORT/$POSTGRES_DB",
          "spring.datasource.username" : "$POSTGRES_USER",
          "spring.datasource.password" : "$POSTGRES_PASSWORD",
          "spring.datasource.driver-class-name" : "org.postgresql.Driver",
          "spring.jpa.hibernate.ddl-auto" : "update",
          "spring.jpa.show-sql" : "true",
          "spring.jpa.properties.hibernate.format_sql" : "true",
          "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
          "server.port" : "$BACKEND_DOCKER_PORT"
        }'
    ports:
      - $BACKEND_LOCAL_PORT:$BACKEND_DOCKER_PORT
    volumes:
      - .m2:/root/.m2

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chargingplatform-frontend
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - $FRONTEND_LOCAL_PORT:$FRONTEND_DOCKER_PORT

  prometheus:
    image: prom/prometheus:latest
    container_name: chargingplatform-prometheus
    ports:
      - ${PROMETHEUS_LOCAL_PORT}:${PROMETHEUS_DOCKER_PORT}
    volumes:
      - ./chargingplatform/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: chargingplatform-grafana
    ports:
      - ${GRAFANA_LOCAL_PORT}:${GRAFANA_DOCKER_PORT}
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
      - backend

  nagios:
    image: jasonrivers/nagios:latest
    container_name: chargingplatform-nagios
    ports:
      - ${NAGIOS_LOCAL_PORT}:${NAGIOS_DOCKER_PORT}
    environment:
      - NAGIOSADMIN_USER=$(NAGIOSADMIN_USER)
      - NAGIOSADMIN_PASS=$(NGIOSADMIN_PASS)
    volumes:
      - ./nagios/custom:/opt/nagios/etc/objects/custom
      - ./nagios/custom/cgi.cfg:/opt/nagios/etc/cgi.cfg
    depends_on:
      - backend
      - postgres

volumes:
  postgres_data:
  grafana-storage: 